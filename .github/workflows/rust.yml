name: Rust

on:
  push:
    branches: [ main ]
    tags-ignore: [ '**' ]
    paths:
    - '.github/workflows/rust.yml'
    - 'rust/**'
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Check Format
      working-directory: ./rust
      run: cargo fmt --all --check

    - name: Check Lint
      working-directory: ./rust
      run: |
        cargo clippy --fix
        git diff --exit-code --quiet

    - name: Create Artifacts
      working-directory: ./rust
      run: |
        cargo build --release --workspace --all-features --verbose
        cargo build --release --workspace --all-features --examples --verbose

    - name: Create Archive
      working-directory: ./rust
      run: |
        RUST_TARGET=$(rustup show active-toolchain | cut -d ' ' -f 1 | sed -e 's/[^-]*-\(.*\)/\1/')

        CUR_DIR=$(pwd)
        mkdir -p "${CUR_DIR}/artifacts"

        LIB_DIR='./target/x86_64-unknown-uefi/release'
        pushd "${LIB_DIR}"
        mapfile -t FILES < <(find . -maxdepth 1 -type f -name '*.efi')
        if [[ -n "${FILES[0]}" ]] ; then
            tar -zcf "${CUR_DIR}/artifacts/${RUST_TARGET}.tar.gz" "${FILES[@]}"
        fi
        popd

        EXAMPLE_DIR='./target/x86_64-unknown-uefi/release/examples/'
        mapfile -t EXAMPLES < <(find "${EXAMPLE_DIR}" -type f -executable)
        for EXAMPLE in "${EXAMPLES[@]}"
        do
            BASE_NAME="$(basename "${EXAMPLE}")"
            if [[ ! $BASE_NAME =~ -[a-fA-F0-9]{16}$ ]] ; then
                tar -C "${EXAMPLE_DIR}" -zcf "./artifacts/${BASE_NAME}-${RUST_TARGET}.tar.gz" "${BASE_NAME}"
            fi
        done

        cargo doc --no-deps --workspace --all-features --verbose
        pushd ./target/x86_64-unknown-uefi/doc
            tar -zcf "${CUR_DIR}/artifacts/help-${RUST_TARGET}.tar.gz" -- *
        popd

        mkdir -p "${CUR_DIR}/artifacts/licenses"
        ./tools/cargo-licenses.sh -o "${CUR_DIR}/artifacts/licenses"

        echo "RUST_TARGET=${RUST_TARGET}" >> "${GITHUB_ENV}"

    - name: Upload Artifact
      uses: actions/upload-artifact@v5
      with:
        name: ${{ env.RUST_TARGET }}
        path: rust/artifacts/
        retention-days: 1
